name: All Services CI/CD Pipeline

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

env:
  AWS_REGION: 'us-east-1'
  AWS_ACCOUNT_ID: '708778582346'

permissions:
  id-token: write
  contents: read

jobs:
  authentication-service:
    runs-on: [self-hosted]
    if: contains(github.event.head_commit.modified, 'services/authentication-service/') || contains(github.event.pull_request.files.*.path, 'services/authentication-service/')
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::708778582346:role/onur-github-role
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Environment
      run: |
        apt-get update && apt-get install -y python3 python3-pip wget unzip curl docker.io openjdk-21-jdk
        ln -sf /usr/bin/python3 /usr/bin/python
        ln -sf /usr/bin/pip3 /usr/bin/pip
        export JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64
        service docker start || true
        chmod 666 /var/run/docker.sock || true
        
        # Install tools
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb generic main" | tee -a /etc/apt/sources.list.d/trivy.list
        apt-get update && apt-get install -y trivy
        
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl && sudo mv kubectl /usr/local/bin/
    
    - name: Unit Tests
      run: |
        cd services/authentication-service
        pip install -r requirements.txt pytest pytest-cov
        python -m pytest tests/ --cov=app --cov-report=xml --cov-fail-under=70 -v
    
    - name: Code Coverage Report
      run: |
        cd services/authentication-service
        echo "Code coverage completed!"
        echo "Coverage report generated: coverage.xml"
    
    - name: Static Code Analysis
      run: |
        cd services/authentication-service
        export JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64
        TOKEN=$(curl -u admin:admin -X POST "http://sonarqube:9000/api/user_tokens/generate" -d "name=auth-token-$(date +%s)" | python3 -c "import sys, json; print(json.load(sys.stdin)['token'])" 2>/dev/null || echo "admin")
        wget -q https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-6.2.1.4610-linux-x64.zip
        unzip -q sonar-scanner-cli-6.2.1.4610-linux-x64.zip
        JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64 ./sonar-scanner-6.2.1.4610-linux-x64/bin/sonar-scanner -Dsonar.projectKey=authentication-service -Dsonar.projectName="Authentication Service" -Dsonar.sources=. -Dsonar.exclusions="tests/**,**/__pycache__/**" -Dsonar.host.url=http://sonarqube:9000 -Dsonar.token="$TOKEN" -Dsonar.python.coverage.reportPaths=coverage.xml
    
    - name: Build Docker Image
      run: |
        cd services/authentication-service
        docker build -t authentication-service:latest .
    
    - name: Security Scan
      run: |
        cd services/authentication-service
        trivy image --server http://trivy:4594 --severity CRITICAL --exit-code 0 authentication-service:latest || echo "⚠️ CRITICAL vulnerabilities found"
    
    - name: Load Test
      run: |
        curl -X POST http://locust:8089/swarm -d "user_count=10&spawn_rate=2&host=http://authentication-service:5000" || true
        sleep 30
        curl -X GET http://locust:8089/stop || true
    
    - name: Push to ECR
      run: |
        cd services/authentication-service
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 708778582346.dkr.ecr.us-east-1.amazonaws.com
        docker tag authentication-service:latest 708778582346.dkr.ecr.us-east-1.amazonaws.com/authentication-service:latest
        docker push 708778582346.dkr.ecr.us-east-1.amazonaws.com/authentication-service:latest
    
    - name: Deploy to Kubernetes
      run: |
        aws eks update-kubeconfig --region us-east-1 --name onur-master-eks
        kubectl set image deployment/authentication-service authentication-service=708778582346.dkr.ecr.us-east-1.amazonaws.com/authentication-service:latest -n authentication
        kubectl rollout status deployment/authentication-service -n authentication --timeout=300s

  user-service:
    runs-on: [self-hosted]
    if: contains(github.event.head_commit.modified, 'services/user-service/') || contains(github.event.pull_request.files.*.path, 'services/user-service/')
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::708778582346:role/onur-github-role
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Environment
      run: |
        apt-get update && apt-get install -y python3 python3-pip wget unzip curl docker.io openjdk-21-jdk
        ln -sf /usr/bin/python3 /usr/bin/python
        ln -sf /usr/bin/pip3 /usr/bin/pip
        export JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64
        service docker start || true
        chmod 666 /var/run/docker.sock || true
        
        # Install tools
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb generic main" | tee -a /etc/apt/sources.list.d/trivy.list
        apt-get update && apt-get install -y trivy
        
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl && sudo mv kubectl /usr/local/bin/
    
    - name: Unit Tests
      run: |
        cd services/user-service
        pip install -r requirements.txt pytest pytest-cov
        python -m pytest tests/ --cov=app --cov-report=xml --cov-fail-under=70 -v
    
    - name: Code Coverage Report
      run: |
        cd services/user-service
        echo "Code coverage completed!"
        echo "Coverage report generated: coverage.xml"
    
    - name: Static Code Analysis
      run: |
        cd services/user-service
        export JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64
        TOKEN=$(curl -u admin:admin -X POST "http://sonarqube:9000/api/user_tokens/generate" -d "name=user-token-$(date +%s)" | python3 -c "import sys, json; print(json.load(sys.stdin)['token'])" 2>/dev/null || echo "admin")
        wget -q https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-6.2.1.4610-linux-x64.zip
        unzip -q sonar-scanner-cli-6.2.1.4610-linux-x64.zip
        JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64 ./sonar-scanner-6.2.1.4610-linux-x64/bin/sonar-scanner -Dsonar.projectKey=user-service -Dsonar.projectName="User Service" -Dsonar.sources=. -Dsonar.exclusions="tests/**,**/__pycache__/**,**/.pytest_cache/**" -Dsonar.host.url=http://sonarqube:9000 -Dsonar.token="$TOKEN" -Dsonar.python.coverage.reportPaths=coverage.xml
    
    - name: Build Docker Image
      run: |
        cd services/user-service
        docker build -t user-service:latest .
    
    - name: Security Scan
      run: |
        cd services/user-service
        trivy image --server http://trivy:4594 --severity CRITICAL --exit-code 0 user-service:latest || echo "⚠️ CRITICAL vulnerabilities found"
    
    - name: Load Test
      run: |
        curl -X POST http://locust:8089/swarm -d "user_count=10&spawn_rate=2&host=http://user-service:5000" || true
        sleep 30
        curl -X GET http://locust:8089/stop || true
    
    - name: Push to ECR
      run: |
        cd services/user-service
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 708778582346.dkr.ecr.us-east-1.amazonaws.com
        docker tag user-service:latest 708778582346.dkr.ecr.us-east-1.amazonaws.com/user-service:latest
        docker push 708778582346.dkr.ecr.us-east-1.amazonaws.com/user-service:latest
    
    - name: Deploy to Kubernetes
      run: |
        aws eks update-kubeconfig --region us-east-1 --name onur-master-eks
        kubectl set image deployment/user-service user-service=708778582346.dkr.ecr.us-east-1.amazonaws.com/user-service:latest -n user
        kubectl rollout status deployment/user-service -n user --timeout=300s

  movie-service:
    runs-on: [self-hosted]
    if: contains(github.event.head_commit.modified, 'services/movie-service/') || contains(github.event.pull_request.files.*.path, 'services/movie-service/')
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::708778582346:role/onur-github-role
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Environment
      run: |
        apt-get update && apt-get install -y golang-go wget unzip curl docker.io openjdk-21-jdk
        export JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64
        service docker start || true
        chmod 666 /var/run/docker.sock || true
        
        # Install tools
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb generic main" | tee -a /etc/apt/sources.list.d/trivy.list
        apt-get update && apt-get install -y trivy
        
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl && sudo mv kubectl /usr/local/bin/
    
    - name: Unit Tests
      run: |
        cd services/movie-service/movie-service
        go test -v -coverprofile=coverage.out ./...
        go tool cover -func=coverage.out
    
    - name: Code Coverage Report
      run: |
        cd services/movie-service/movie-service
        echo "Code coverage completed!"
        echo "Coverage report generated: coverage.out"
    
    - name: Static Code Analysis
      run: |
        cd services/movie-service/movie-service
        export JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64
        TOKEN=$(curl -u admin:admin -X POST "http://sonarqube:9000/api/user_tokens/generate" -d "name=movie-token-$(date +%s)" | python3 -c "import sys, json; print(json.load(sys.stdin)['token'])" 2>/dev/null || echo "admin")
        wget -q https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-6.2.1.4610-linux-x64.zip
        unzip -q sonar-scanner-cli-6.2.1.4610-linux-x64.zip
        JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64 ./sonar-scanner-6.2.1.4610-linux-x64/bin/sonar-scanner -Dsonar.projectKey=movie-service -Dsonar.projectName="Movie Service" -Dsonar.sources=. -Dsonar.exclusions="tests/**" -Dsonar.host.url=http://sonarqube:9000 -Dsonar.token="$TOKEN" -Dsonar.go.coverage.reportPaths=coverage.out
    
    - name: Build Docker Image
      run: |
        cd services/movie-service/movie-service
        docker build -t movie-service:latest .
    
    - name: Security Scan
      run: |
        cd services/movie-service/movie-service
        trivy image --server http://trivy:4594 --severity CRITICAL --exit-code 0 movie-service:latest || echo "⚠️ CRITICAL vulnerabilities found"
    
    - name: Load Test
      run: |
        curl -X POST http://locust:8089/swarm -d "user_count=10&spawn_rate=2&host=http://movie-service:8080" || true
        sleep 30
        curl -X GET http://locust:8089/stop || true
    
    - name: Push to ECR
      run: |
        cd services/movie-service/movie-service
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 708778582346.dkr.ecr.us-east-1.amazonaws.com
        docker tag movie-service:latest 708778582346.dkr.ecr.us-east-1.amazonaws.com/movie-service:latest
        docker push 708778582346.dkr.ecr.us-east-1.amazonaws.com/movie-service:latest
    
    - name: Deploy to Kubernetes
      run: |
        aws eks update-kubeconfig --region us-east-1 --name onur-master-eks
        kubectl set image deployment/movie-service movie-service=708778582346.dkr.ecr.us-east-1.amazonaws.com/movie-service:latest -n movies
        kubectl rollout status deployment/movie-service -n movies --timeout=300s

  series-service:
    runs-on: [self-hosted]
    if: contains(github.event.head_commit.modified, 'services/series-service/') || contains(github.event.pull_request.files.*.path, 'services/series-service/')
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::708778582346:role/onur-github-role
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Environment
      run: |
        apt-get update && apt-get install -y golang-go wget unzip curl docker.io openjdk-21-jdk
        export JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64
        service docker start || true
        chmod 666 /var/run/docker.sock || true
        
        # Install tools
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb generic main" | tee -a /etc/apt/sources.list.d/trivy.list
        apt-get update && apt-get install -y trivy
        
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl && sudo mv kubectl /usr/local/bin/
    
    - name: Unit Tests
      run: |
        cd services/series-service/series-service
        go test -v -coverprofile=coverage.out ./...
        go tool cover -func=coverage.out
    
    - name: Code Coverage Report
      run: |
        cd services/series-service/series-service
        echo "Code coverage completed!"
        echo "Coverage report generated: coverage.out"
    
    - name: Static Code Analysis
      run: |
        cd services/series-service/series-service
        export JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64
        TOKEN=$(curl -u admin:admin -X POST "http://sonarqube:9000/api/user_tokens/generate" -d "name=series-token-$(date +%s)" | python3 -c "import sys, json; print(json.load(sys.stdin)['token'])" 2>/dev/null || echo "admin")
        wget -q https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-6.2.1.4610-linux-x64.zip
        unzip -q sonar-scanner-cli-6.2.1.4610-linux-x64.zip
        JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64 ./sonar-scanner-6.2.1.4610-linux-x64/bin/sonar-scanner -Dsonar.projectKey=series-service -Dsonar.projectName="Series Service" -Dsonar.sources=. -Dsonar.exclusions="tests/**" -Dsonar.host.url=http://sonarqube:9000 -Dsonar.token="$TOKEN" -Dsonar.go.coverage.reportPaths=coverage.out
    
    - name: Build Docker Image
      run: |
        cd services/series-service/series-service
        docker build -t series-service:latest .
    
    - name: Security Scan
      run: |
        cd services/series-service/series-service
        trivy image --server http://trivy:4594 --severity CRITICAL --exit-code 0 series-service:latest || echo "⚠️ CRITICAL vulnerabilities found"
    
    - name: Load Test
      run: |
        curl -X POST http://locust:8089/swarm -d "user_count=10&spawn_rate=2&host=http://series-service:8080" || true
        sleep 30
        curl -X GET http://locust:8089/stop || true
    
    - name: Push to ECR
      run: |
        cd services/series-service/series-service
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 708778582346.dkr.ecr.us-east-1.amazonaws.com
        docker tag series-service:latest 708778582346.dkr.ecr.us-east-1.amazonaws.com/series-service:latest
        docker push 708778582346.dkr.ecr.us-east-1.amazonaws.com/series-service:latest
    
    - name: Deploy to Kubernetes
      run: |
        aws eks update-kubeconfig --region us-east-1 --name onur-master-eks
        kubectl set image deployment/series-service series-service=708778582346.dkr.ecr.us-east-1.amazonaws.com/series-service:latest -n series
        kubectl rollout status deployment/series-service -n series --timeout=300s

  search-service:
    runs-on: [self-hosted]
    if: contains(github.event.head_commit.modified, 'services/search-service/') || contains(github.event.pull_request.files.*.path, 'services/search-service/')
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::708778582346:role/onur-github-role
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Environment
      run: |
        apt-get update && apt-get install -y nodejs npm wget unzip curl docker.io openjdk-21-jdk
        export JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64
        service docker start || true
        chmod 666 /var/run/docker.sock || true
        
        # Install tools
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb generic main" | tee -a /etc/apt/sources.list.d/trivy.list
        apt-get update && apt-get install -y trivy
        
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl && sudo mv kubectl /usr/local/bin/
    
    - name: Unit Tests
      run: |
        cd services/search-service
        npm install
        npm test -- --coverage
    
    - name: Code Coverage Report
      run: |
        cd services/search-service
        echo "Code coverage completed!"
        echo "Coverage report generated: coverage/lcov.info"
    
    - name: Static Code Analysis
      run: |
        cd services/search-service
        export JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64
        TOKEN=$(curl -u admin:admin -X POST "http://sonarqube:9000/api/user_tokens/generate" -d "name=search-token-$(date +%s)" | python3 -c "import sys, json; print(json.load(sys.stdin)['token'])" 2>/dev/null || echo "admin")
        wget -q https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-6.2.1.4610-linux-x64.zip
        unzip -q sonar-scanner-cli-6.2.1.4610-linux-x64.zip
        JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64 ./sonar-scanner-6.2.1.4610-linux-x64/bin/sonar-scanner -Dsonar.projectKey=search-service -Dsonar.projectName="Search Service" -Dsonar.sources=src -Dsonar.exclusions="test/**,node_modules/**" -Dsonar.host.url=http://sonarqube:9000 -Dsonar.token="$TOKEN" -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
    
    - name: Build Docker Image
      run: |
        cd services/search-service
        docker build -t search-service:latest .
    
    - name: Security Scan
      run: |
        cd services/search-service
        trivy image --server http://trivy:4594 --severity CRITICAL --exit-code 0 search-service:latest || echo "⚠️ CRITICAL vulnerabilities found"
    
    - name: Load Test
      run: |
        curl -X POST http://locust:8089/swarm -d "user_count=10&spawn_rate=2&host=http://search-service:3000" || true
        sleep 30
        curl -X GET http://locust:8089/stop || true
    
    - name: Push to ECR
      run: |
        cd services/search-service
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 708778582346.dkr.ecr.us-east-1.amazonaws.com
        docker tag search-service:latest 708778582346.dkr.ecr.us-east-1.amazonaws.com/search-service:latest
        docker push 708778582346.dkr.ecr.us-east-1.amazonaws.com/search-service:latest
    
    - name: Deploy to Kubernetes
      run: |
        aws eks update-kubeconfig --region us-east-1 --name onur-master-eks
        kubectl set image deployment/search-service search-service=708778582346.dkr.ecr.us-east-1.amazonaws.com/search-service:latest -n search
        kubectl rollout status deployment/search-service -n search --timeout=300s

  frontend:
    runs-on: [self-hosted]
    # if: contains(github.event.head_commit.modified, 'services/frontend/') || contains(github.event.pull_request.files.*.path, 'services/frontend/')
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::708778582346:role/onur-github-role
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Environment
      run: |
        apt-get update && apt-get install -y python3 python3-pip wget unzip curl docker.io openjdk-21-jdk
        ln -sf /usr/bin/python3 /usr/bin/python
        ln -sf /usr/bin/pip3 /usr/bin/pip
        export JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64
        service docker start || true
        chmod 666 /var/run/docker.sock || true
        
        # Install tools
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb generic main" | tee -a /etc/apt/sources.list.d/trivy.list
        apt-get update && apt-get install -y trivy
        
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl && sudo mv kubectl /usr/local/bin/
    
    - name: Unit Tests
      run: |
        cd services/frontend
        pip install -r requirements.txt pytest pytest-cov
        python -m pytest --cov=streamlit_app --cov-report=xml --cov-fail-under=70 -v
    
    - name: Code Coverage Report
      run: |
        cd services/frontend
        echo "Code coverage completed!"
        echo "Coverage report generated: coverage.xml"
    
    - name: Static Code Analysis
      run: |
        cd services/frontend
        export JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64
        TOKEN=$(curl -u admin:admin -X POST "http://sonarqube:9000/api/user_tokens/generate" -d "name=frontend-token-$(date +%s)" | python3 -c "import sys, json; print(json.load(sys.stdin)['token'])" 2>/dev/null || echo "admin")
        wget -q https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-6.2.1.4610-linux-x64.zip
        unzip -q sonar-scanner-cli-6.2.1.4610-linux-x64.zip
        JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64 ./sonar-scanner-6.2.1.4610-linux-x64/bin/sonar-scanner -Dsonar.projectKey=frontend -Dsonar.projectName="Frontend Service" -Dsonar.sources=. -Dsonar.exclusions="**/__pycache__/**" -Dsonar.host.url=http://sonarqube:9000 -Dsonar.token="$TOKEN" -Dsonar.python.coverage.reportPaths=coverage.xml
    
    - name: Build Docker Image
      run: |
        cd services/frontend
        docker build -t frontend:latest .
    
    - name: Security Scan
      run: |
        cd services/frontend
        trivy image --server http://trivy:4594 --severity CRITICAL --exit-code 0 frontend:latest || echo "⚠️ CRITICAL vulnerabilities found"
    
    - name: Load Test
      run: |
        curl -X POST http://locust:8089/swarm -d "user_count=10&spawn_rate=2&host=http://frontend:8501" || true
        sleep 30
        curl -X GET http://locust:8089/stop || true
    
    - name: Push to ECR
      run: |
        cd services/frontend
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 708778582346.dkr.ecr.us-east-1.amazonaws.com
        docker tag frontend:latest 708778582346.dkr.ecr.us-east-1.amazonaws.com/frontend:latest
        docker push 708778582346.dkr.ecr.us-east-1.amazonaws.com/frontend:latest
    
    - name: Deploy to Kubernetes
      run: |
        aws eks update-kubeconfig --region us-east-1 --name onur-master-eks
        kubectl set image deployment/frontend frontend=708778582346.dkr.ecr.us-east-1.amazonaws.com/frontend:latest -n frontend
        kubectl rollout status deployment/frontend -n frontend --timeout=300s

  bedrock-backend:
    runs-on: [self-hosted]
    if: contains(github.event.head_commit.modified, 'services/bedrock_backend/') || contains(github.event.pull_request.files.*.path, 'services/bedrock_backend/')
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::708778582346:role/onur-github-role
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Environment
      run: |
        apt-get update && apt-get install -y python3 python3-pip wget unzip curl docker.io openjdk-21-jdk
        ln -sf /usr/bin/python3 /usr/bin/python
        ln -sf /usr/bin/pip3 /usr/bin/pip
        export JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64
        service docker start || true
        chmod 666 /var/run/docker.sock || true
        
        # Install tools
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb generic main" | tee -a /etc/apt/sources.list.d/trivy.list
        apt-get update && apt-get install -y trivy
        
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl && sudo mv kubectl /usr/local/bin/
    
    - name: Unit Tests
      run: |
        cd services/bedrock_backend
        pip install -r requirements.txt pytest pytest-cov
        python -m pytest test_app.py --cov=app --cov-report=xml --cov-fail-under=70 -v
    
    - name: Code Coverage Report
      run: |
        cd services/bedrock_backend
        echo "Code coverage completed!"
        echo "Coverage report generated: coverage.xml"
    
    - name: Static Code Analysis
      run: |
        cd services/bedrock_backend
        export JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64
        TOKEN=$(curl -u admin:admin -X POST "http://sonarqube:9000/api/user_tokens/generate" -d "name=bedrock-token-$(date +%s)" | python3 -c "import sys, json; print(json.load(sys.stdin)['token'])" 2>/dev/null || echo "admin")
        wget -q https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-6.2.1.4610-linux-x64.zip
        unzip -q sonar-scanner-cli-6.2.1.4610-linux-x64.zip
        JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64 ./sonar-scanner-6.2.1.4610-linux-x64/bin/sonar-scanner -Dsonar.projectKey=bedrock-backend -Dsonar.projectName="Bedrock Backend" -Dsonar.sources=. -Dsonar.exclusions="test_*.py,**/__pycache__/**" -Dsonar.host.url=http://sonarqube:9000 -Dsonar.token="$TOKEN" -Dsonar.python.coverage.reportPaths=coverage.xml
    
    - name: Build Docker Image
      run: |
        cd services/bedrock_backend
        docker build -t bedrock-backend:latest .
    
    - name: Security Scan
      run: |
        cd services/bedrock_backend
        trivy image --server http://trivy:4594 --severity CRITICAL --exit-code 0 bedrock-backend:latest || echo "⚠️ CRITICAL vulnerabilities found"
    
    - name: Load Test
      run: |
        curl -X POST http://locust:8089/swarm -d "user_count=10&spawn_rate=2&host=http://bedrock-backend:5000" || true
        sleep 30
        curl -X GET http://locust:8089/stop || true
    
    - name: Push to ECR
      run: |
        cd services/bedrock_backend
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 708778582346.dkr.ecr.us-east-1.amazonaws.com
        docker tag bedrock-backend:latest 708778582346.dkr.ecr.us-east-1.amazonaws.com/bedrock-backend:latest
        docker push 708778582346.dkr.ecr.us-east-1.amazonaws.com/bedrock-backend:latest
    
    - name: Deploy to Kubernetes
      run: |
        aws eks update-kubeconfig --region us-east-1 --name onur-master-eks
        kubectl set image deployment/bedrock-backend bedrock-backend=708778582346.dkr.ecr.us-east-1.amazonaws.com/bedrock-backend:latest -n bedrock
        kubectl rollout status deployment/bedrock-backend -n bedrock --timeout=300s

  machine-learning-service:
    runs-on: [self-hosted]
    if: contains(github.event.head_commit.modified, 'services/machine_learning_service/') || contains(github.event.pull_request.files.*.path, 'services/machine_learning_service/')
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::708778582346:role/onur-github-role
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Environment
      run: |
        apt-get update && apt-get install -y python3 python3-pip wget unzip curl docker.io openjdk-21-jdk
        ln -sf /usr/bin/python3 /usr/bin/python
        ln -sf /usr/bin/pip3 /usr/bin/pip
        export JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64
        service docker start || true
        chmod 666 /var/run/docker.sock || true
        
        # Install tools
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb generic main" | tee -a /etc/apt/sources.list.d/trivy.list
        apt-get update && apt-get install -y trivy
        
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl && sudo mv kubectl /usr/local/bin/
    
    - name: Unit Tests
      run: |
        cd services/machine_learning_service
        pip install -r requirements.txt pytest pytest-cov
        python -m pytest tests/ --cov=app --cov-report=xml --cov-fail-under=70 -v
    
    - name: Code Coverage Report
      run: |
        cd services/machine_learning_service
        echo "Code coverage completed!"
        echo "Coverage report generated: coverage.xml"
    
    - name: Static Code Analysis
      run: |
        cd services/machine_learning_service
        export JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64
        TOKEN=$(curl -u admin:admin -X POST "http://sonarqube:9000/api/user_tokens/generate" -d "name=ml-token-$(date +%s)" | python3 -c "import sys, json; print(json.load(sys.stdin)['token'])" 2>/dev/null || echo "admin")
        wget -q https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-6.2.1.4610-linux-x64.zip
        unzip -q sonar-scanner-cli-6.2.1.4610-linux-x64.zip
        JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64 ./sonar-scanner-6.2.1.4610-linux-x64/bin/sonar-scanner -Dsonar.projectKey=machine-learning-service -Dsonar.projectName="Machine Learning Service" -Dsonar.sources=. -Dsonar.exclusions="tests/**,**/__pycache__/**,**/.pytest_cache/**" -Dsonar.host.url=http://sonarqube:9000 -Dsonar.token="$TOKEN" -Dsonar.python.coverage.reportPaths=coverage.xml
    
    - name: Build Docker Image
      run: |
        cd services/machine_learning_service
        docker build -t machine-learning-service:latest .
    
    - name: Security Scan
      run: |
        cd services/machine_learning_service
        trivy image --server http://trivy:4594 --severity CRITICAL --exit-code 0 machine-learning-service:latest || echo "⚠️ CRITICAL vulnerabilities found"
    
    - name: Load Test
      run: |
        curl -X POST http://locust:8089/swarm -d "user_count=10&spawn_rate=2&host=http://machine-learning-service:5000" || true
        sleep 30
        curl -X GET http://locust:8089/stop || true
    
    - name: Push to ECR
      run: |
        cd services/machine_learning_service
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 708778582346.dkr.ecr.us-east-1.amazonaws.com
        docker tag machine-learning-service:latest 708778582346.dkr.ecr.us-east-1.amazonaws.com/machine-learning-service:latest
        docker push 708778582346.dkr.ecr.us-east-1.amazonaws.com/machine-learning-service:latest
    
    - name: Deploy to Kubernetes
      run: |
        aws eks update-kubeconfig --region us-east-1 --name onur-master-eks
        kubectl set image deployment/machine-learning-service machine-learning-service=708778582346.dkr.ecr.us-east-1.amazonaws.com/machine-learning-service:latest -n ml
        kubectl rollout status deployment/machine-learning-service -n ml --timeout=300s

  kinesis-producer:
    runs-on: [self-hosted]
    if: contains(github.event.head_commit.modified, 'services/kinesis-producer/') || contains(github.event.pull_request.files.*.path, 'services/kinesis-producer/')
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::708778582346:role/onur-github-role
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Environment
      run: |
        apt-get update && apt-get install -y nodejs npm wget unzip curl docker.io openjdk-21-jdk
        export JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64
        service docker start || true
        chmod 666 /var/run/docker.sock || true
        
        # Install tools
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb generic main" | tee -a /etc/apt/sources.list.d/trivy.list
        apt-get update && apt-get install -y trivy
        
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl && sudo mv kubectl /usr/local/bin/
    
    - name: Unit Tests
      run: |
        cd services/kinesis-producer
        npm install
        npm test
    
    - name: Code Coverage Report
      run: |
        cd services/kinesis-producer
        echo "Unit tests completed!"
    
    - name: Static Code Analysis
      run: |
        cd services/kinesis-producer
        export JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64
        TOKEN=$(curl -u admin:admin -X POST "http://sonarqube:9000/api/user_tokens/generate" -d "name=producer-token-$(date +%s)" | python3 -c "import sys, json; print(json.load(sys.stdin)['token'])" 2>/dev/null || echo "admin")
        wget -q https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-6.2.1.4610-linux-x64.zip
        unzip -q sonar-scanner-cli-6.2.1.4610-linux-x64.zip
        JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64 ./sonar-scanner-6.2.1.4610-linux-x64/bin/sonar-scanner -Dsonar.projectKey=kinesis-producer -Dsonar.projectName="Kinesis Producer" -Dsonar.sources=. -Dsonar.exclusions="node_modules/**" -Dsonar.host.url=http://sonarqube:9000 -Dsonar.token="$TOKEN"
    
    - name: Build Docker Image
      run: |
        cd services/kinesis-producer
        docker build -t kinesis-producer:latest .
    
    - name: Security Scan
      run: |
        cd services/kinesis-producer
        trivy image --server http://trivy:4594 --severity CRITICAL --exit-code 0 kinesis-producer:latest || echo "⚠️ CRITICAL vulnerabilities found"
    
    - name: Load Test
      run: |
        curl -X POST http://locust:8089/swarm -d "user_count=10&spawn_rate=2&host=http://kinesis-producer:3000" || true
        sleep 30
        curl -X GET http://locust:8089/stop || true
    
    - name: Push to ECR
      run: |
        cd services/kinesis-producer
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 708778582346.dkr.ecr.us-east-1.amazonaws.com
        docker tag kinesis-producer:latest 708778582346.dkr.ecr.us-east-1.amazonaws.com/kinesis-producer:latest
        docker push 708778582346.dkr.ecr.us-east-1.amazonaws.com/kinesis-producer:latest
    
    - name: Deploy to Kubernetes
      run: |
        aws eks update-kubeconfig --region us-east-1 --name onur-master-eks
        kubectl set image deployment/kinesis-producer kinesis-producer=708778582346.dkr.ecr.us-east-1.amazonaws.com/kinesis-producer:latest -n kinesis
        kubectl rollout status deployment/kinesis-producer -n kinesis --timeout=300s

  kinesis-consumer:
    runs-on: [self-hosted]
    if: contains(github.event.head_commit.modified, 'services/kinesis-consumer/') || contains(github.event.pull_request.files.*.path, 'services/kinesis-consumer/')
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::708778582346:role/onur-github-role
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Environment
      run: |
        apt-get update && apt-get install -y nodejs npm wget unzip curl docker.io openjdk-21-jdk
        export JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64
        service docker start || true
        chmod 666 /var/run/docker.sock || true
        
        # Install tools
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb generic main" | tee -a /etc/apt/sources.list.d/trivy.list
        apt-get update && apt-get install -y trivy
        
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl && sudo mv kubectl /usr/local/bin/
    
    - name: Unit Tests
      run: |
        cd services/kinesis-consumer
        npm install
        npm test
    
    - name: Code Coverage Report
      run: |
        cd services/kinesis-consumer
        echo "Unit tests completed!"
    
    - name: Static Code Analysis
      run: |
        cd services/kinesis-consumer
        export JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64
        TOKEN=$(curl -u admin:admin -X POST "http://sonarqube:9000/api/user_tokens/generate" -d "name=consumer-token-$(date +%s)" | python3 -c "import sys, json; print(json.load(sys.stdin)['token'])" 2>/dev/null || echo "admin")
        wget -q https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-6.2.1.4610-linux-x64.zip
        unzip -q sonar-scanner-cli-6.2.1.4610-linux-x64.zip
        JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64 ./sonar-scanner-6.2.1.4610-linux-x64/bin/sonar-scanner -Dsonar.projectKey=kinesis-consumer -Dsonar.projectName="Kinesis Consumer" -Dsonar.sources=. -Dsonar.exclusions="node_modules/**" -Dsonar.host.url=http://sonarqube:9000 -Dsonar.token="$TOKEN"
    
    - name: Build Docker Image
      run: |
        cd services/kinesis-consumer
        docker build -t kinesis-consumer:latest .
    
    - name: Security Scan
      run: |
        cd services/kinesis-consumer
        trivy image --server http://trivy:4594 --severity CRITICAL --exit-code 0 kinesis-consumer:latest || echo "⚠️ CRITICAL vulnerabilities found"
    
    - name: Load Test
      run: |
        curl -X POST http://locust:8089/swarm -d "user_count=10&spawn_rate=2&host=http://kinesis-consumer:3000" || true
        sleep 30
        curl -X GET http://locust:8089/stop || true
    
    - name: Push to ECR
      run: |
        cd services/kinesis-consumer
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 708778582346.dkr.ecr.us-east-1.amazonaws.com
        docker tag kinesis-consumer:latest 708778582346.dkr.ecr.us-east-1.amazonaws.com/kinesis-consumer:latest
        docker push 708778582346.dkr.ecr.us-east-1.amazonaws.com/kinesis-consumer:latest
    
    - name: Deploy to Kubernetes
      run: |
        aws eks update-kubeconfig --region us-east-1 --name onur-master-eks
        kubectl set image deployment/kinesis-consumer kinesis-consumer=708778582346.dkr.ecr.us-east-1.amazonaws.com/kinesis-consumer:latest -n kinesis
        kubectl rollout status deployment/kinesis-consumer -n kinesis --timeout=300s 