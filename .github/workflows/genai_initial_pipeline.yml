name: GENAI Initial Pipeline

on:
  workflow_dispatch:
    inputs:
      aws_region:
        description: 'AWS Region'
        required: true
        default: 'us-east-1'
        type: string

env:
  AWS_REGION: ${{ github.event.inputs.aws_region || 'us-east-1' }}
  AWS_ACCOUNT_ID: '708778582346'

permissions:
  id-token: write
  contents: read

jobs:
  genai-init:
    runs-on: ubuntu-latest
    environment: PROD
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::708778582346:role/onur-github-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy RAG CloudFormation Stack
        run: |
          echo "Deploying RAG CloudFormation Stack..."
          STACK_NAME="genai-rag"
          
          # Check if stack exists
          if aws cloudformation describe-stacks --stack-name $STACK_NAME --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
            echo "Stack '$STACK_NAME' already exists. Updating..."
            aws cloudformation deploy \
              --template-file cloudformation_templates/RAG.yml \
              --stack-name $STACK_NAME \
              --region ${{ env.AWS_REGION }} \
              --capabilities CAPABILITY_NAMED_IAM \
              --force-upload
          else
            echo "Creating new stack '$STACK_NAME'..."
            aws cloudformation deploy \
              --template-file cloudformation_templates/RAG.yml \
              --stack-name $STACK_NAME \
              --region ${{ env.AWS_REGION }} \
              --capabilities CAPABILITY_NAMED_IAM
          fi

      - name: Wait for RAG Stack to Complete
        run: |
          STACK_NAME="genai-rag"
          echo "Waiting for RAG stack to complete..."
          
          aws cloudformation wait stack-create-complete \
            --stack-name $STACK_NAME \
            --region ${{ env.AWS_REGION }} || \
          aws cloudformation wait stack-update-complete \
            --stack-name $STACK_NAME \
            --region ${{ env.AWS_REGION }}
          
          echo "RAG stack deployment completed!"

      - name: Get RAG Stack Outputs
        id: rag-outputs
        run: |
          STACK_NAME="genai-rag"
          
          # Get Knowledge Base ID
          KNOWLEDGE_BASE_ID=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`KnowledgeBaseId`].OutputValue' \
            --output text)
          
          # Get Data Source ID
          DATA_SOURCE_ID=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`DataSourceId`].OutputValue' \
            --output text)
          
          # Get Agent ID
          AGENT_ID=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`AgentId`].OutputValue' \
            --output text)
          
          echo "Knowledge Base ID: $KNOWLEDGE_BASE_ID"
          echo "Data Source ID: $DATA_SOURCE_ID"
          echo "Agent ID: $AGENT_ID"
          
          # Set outputs for next steps
          echo "knowledge_base_id=$KNOWLEDGE_BASE_ID" >> $GITHUB_OUTPUT
          echo "data_source_id=$DATA_SOURCE_ID" >> $GITHUB_OUTPUT
          echo "agent_id=$AGENT_ID" >> $GITHUB_OUTPUT

      - name: Start Data Ingestion Job
        run: |
          echo "Starting data ingestion job..."
          
          # Get the data source ID and knowledge base ID
          DATA_SOURCE_ID="${{ steps.rag-outputs.outputs.data_source_id }}"
          KNOWLEDGE_BASE_ID="${{ steps.rag-outputs.outputs.knowledge_base_id }}"
          
          if [ -z "$DATA_SOURCE_ID" ] || [ -z "$KNOWLEDGE_BASE_ID" ]; then
            echo "Failed to get Data Source ID or Knowledge Base ID"
            exit 1
          fi
          
          # Start ingestion job
          INGESTION_JOB_ID=$(aws bedrock-agent start-ingestion-job \
            --knowledge-base-id "$KNOWLEDGE_BASE_ID" \
            --data-source-id "$DATA_SOURCE_ID" \
            --region ${{ env.AWS_REGION }} \
            --query 'IngestionJob.IngestionJobId' \
            --output text)
          
          if [ $? -eq 0 ]; then
            echo "Ingestion job started with ID: $INGESTION_JOB_ID"
            echo "ingestion_job_id=$INGESTION_JOB_ID" >> $GITHUB_OUTPUT
          else
            echo "Failed to start ingestion job"
            exit 1
          fi

      - name: Wait for Ingestion Job to Complete
        run: |
          echo "Waiting for ingestion job to complete..."
          
          INGESTION_JOB_ID="${{ steps.rag-outputs.outputs.ingestion_job_id }}"
          
          if [ -z "$INGESTION_JOB_ID" ]; then
            echo "No ingestion job ID found"
            exit 1
          fi
          
          # Wait for job to complete
          STATUS="IN_PROGRESS"
          until [ "$STATUS" = "COMPLETE" ] || [ "$STATUS" = "FAILED" ]; do
            echo "Current status: $STATUS"
            sleep 30
            
            STATUS=$(aws bedrock-agent get-ingestion-job \
              --knowledge-base-id "$KNOWLEDGE_BASE_ID" \
              --data-source-id "$DATA_SOURCE_ID" \
              --ingestion-job-id "$INGESTION_JOB_ID" \
              --region ${{ env.AWS_REGION }} \
              --query 'IngestionJob.Status' \
              --output text)
          done
          
          if [ "$STATUS" = "COMPLETE" ]; then
            echo "Ingestion job completed successfully!"
          else
            echo "Ingestion job failed with status: $STATUS"
            exit 1
          fi

      - name: Deploy AI Services to Kubernetes
        run: |
          echo "Deploying AI services to Kubernetes..."
          
          # Update kubeconfig
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name onur-master-eks
          
          # Create AI namespace if not exists
          kubectl create namespace ai --dry-run=client -o yaml | kubectl apply -f -
          
          # Deploy AI services
          kubectl apply -f kubernetes_manifest/ai/
          
          # Wait for AI services to be ready
          kubectl wait --for=condition=available --timeout=300s deployment/chatbot -n ai || echo "Chatbot deployment not ready yet"





      - name: Verify Deployments
        run: |
          echo "Verifying all deployments..."
          
          echo "AI Services Status:"
          kubectl get pods -n ai
          
          echo "All services deployed successfully!"

      - name: Show Service URLs
        run: |
          echo "Service URLs:"
          echo "Chatbot: http://chatbot.ai.svc.cluster.local:8091" 