AWSTemplateFormatVersion: '2010-09-09'
Description: 'EKS Cluster + NodeGroups + Add-ons + IAM Roles (Auto Mode OFF)'

Parameters:
  ClusterName:
    Type: String
    Default: onur-master-eks
  KubernetesVersion:
    Type: String
    Default: '1.31'
    AllowedValues: ['1.30','1.31']
  NetworkStackName:
    Type: String
    Default: network-stack

Resources:
  # Cluster SG
  EKSClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub '${ClusterName} Cluster SG'
      VpcId: !ImportValue
        Fn::Sub: '${NetworkStackName}-VPC'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.0.0.0/16
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # Cluster IAM Role
  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ClusterName}-ClusterRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: eks.amazonaws.com }
            Action:
              - sts:AssumeRole
              - sts:TagSession
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  # Node IAM Role
  NodeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ClusterName}-NodeRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: ec2.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  # EKS Cluster (Auto Mode OFF)
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      Version: !Ref KubernetesVersion
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds: [ !Ref EKSClusterSecurityGroup ]
        SubnetIds:
          - !ImportValue { Fn::Sub: '${NetworkStackName}-PrivateSubnet1' }
          - !ImportValue { Fn::Sub: '${NetworkStackName}-PrivateSubnet2' }
          - !ImportValue { Fn::Sub: '${NetworkStackName}-PublicSubnet1' }
          - !ImportValue { Fn::Sub: '${NetworkStackName}-PublicSubnet2' }
        EndpointPrivateAccess: true
        EndpointPublicAccess: true
      KubernetesNetworkConfig:
        IpFamily: ipv4
      AccessConfig:
        AuthenticationMode: CONFIG_MAP
        BootstrapClusterCreatorAdminPermissions: true

  # Access Entry for SSO Administrator
  EKSAccessEntry:
    Type: AWS::EKS::AccessEntry
    Properties:
      ClusterName: !Ref EKSCluster
      PrincipalArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-reserved/sso.amazonaws.com/AWSReservedSSO_AdministratorAccess_d58e90fb67f5d77e'
      Type: STANDARD
      AccessPolicies:
        - PolicyArn: arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy
          AccessScope:
            Type: cluster

  # NodeGroups
  ServicesNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: services-nodegroup
      NodeRole: !GetAtt NodeRole.Arn
      Subnets:
        - !ImportValue { Fn::Sub: '${NetworkStackName}-PrivateSubnet1' }
        - !ImportValue { Fn::Sub: '${NetworkStackName}-PrivateSubnet2' }
      InstanceTypes: [t3.xlarge]
      ScalingConfig:
        MinSize: 1
        MaxSize: 3
        DesiredSize: 1
      Labels: { node-type: services }

  DevOpsNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: devops-nodegroup
      NodeRole: !GetAtt NodeRole.Arn
      Subnets:
        - !ImportValue { Fn::Sub: '${NetworkStackName}-PrivateSubnet1' }
        - !ImportValue { Fn::Sub: '${NetworkStackName}-PrivateSubnet2' }
      InstanceTypes: [t3.xlarge]
      ScalingConfig:
        MinSize: 1
        MaxSize: 3
        DesiredSize: 1
      Labels: { node-type: devops }

  GitOpsNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: gitops-nodegroup
      NodeRole: !GetAtt NodeRole.Arn
      Subnets:
        - !ImportValue { Fn::Sub: '${NetworkStackName}-PrivateSubnet1' }
        - !ImportValue { Fn::Sub: '${NetworkStackName}-PrivateSubnet2' }
      InstanceTypes: [t3.medium]
      ScalingConfig:
        MinSize: 1
        MaxSize: 3
        DesiredSize: 1
      Labels: { node-type: gitops }

  RecommendationNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: recommendation-nodegroup
      NodeRole: !GetAtt NodeRole.Arn
      Subnets:
        - !ImportValue { Fn::Sub: '${NetworkStackName}-PrivateSubnet1' }
        - !ImportValue { Fn::Sub: '${NetworkStackName}-PrivateSubnet2' }
      InstanceTypes: [t3.medium]
      ScalingConfig:
        MinSize: 1
        MaxSize: 3
        DesiredSize: 1
      Labels: { node-type: recommendation }

  StreamingNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: streaming-nodegroup
      NodeRole: !GetAtt NodeRole.Arn
      Subnets:
        - !ImportValue { Fn::Sub: '${NetworkStackName}-PrivateSubnet1' }
        - !ImportValue { Fn::Sub: '${NetworkStackName}-PrivateSubnet2' }
      InstanceTypes: [t3.medium]
      ScalingConfig:
        MinSize: 1
        MaxSize: 2
        DesiredSize: 1
      Labels: { node-type: streaming }

  MonitoringNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: monitoring-nodegroup
      NodeRole: !GetAtt NodeRole.Arn
      Subnets:
        - !ImportValue { Fn::Sub: '${NetworkStackName}-PrivateSubnet1' }
        - !ImportValue { Fn::Sub: '${NetworkStackName}-PrivateSubnet2' }
      InstanceTypes: [t3.medium]
      ScalingConfig:
        MinSize: 1
        MaxSize: 2
        DesiredSize: 1
      Labels: { node-type: monitoring }

  # Add-on (CloudWatch)
  ContainerInsightsAddon:
    Type: AWS::EKS::Addon
    Properties:
      ClusterName: !Ref EKSCluster
      AddonName: amazon-cloudwatch-observability

Outputs:
  ClusterName:
    Value: !Ref EKSCluster
  ClusterEndpoint:
    Value: !GetAtt EKSCluster.Endpoint
  ClusterArn:
    Value: !GetAtt EKSCluster.Arn
  NodeRoleArn:
    Value: !GetAtt NodeRole.Arn
  AccessEntryArn:
    Value: !GetAtt EKSAccessEntry.AccessEntryArn