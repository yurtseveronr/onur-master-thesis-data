AWSTemplateFormatVersion: '2010-09-09'
Description: Full RAG Stack with Bedrock + Amazon Neptune Analytics (Agent=Claude 3.5 Haiku, Enrichment=Claude 3 Haiku 20240307)

Parameters:
  DataSourceBucketName:
    Type: String
    Default: onur-master-dataset
  DataSourcePrefix:
    Type: String
    Default: dataset/knowledge_base/
  CollectionName:
    Type: String
    Default: movies-series
  # Agent foundation model *ID* (STRING literal!)
  AgentModelId:
    Type: String
    Default: anthropic.claude-3-haiku-20240307-v1:0

Resources:
  BedrockAgentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: bedrock-agent-role-v99
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonBedrockFullAccess
      Policies:
        - PolicyName: NeptuneAnalyticsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - neptune-graph:*
                  - aoss:ListCollections
                  - aoss:ListIndexes
                  - s3:GetObject
                  - s3:ListBucket
                  - kms:*
                Resource: '*'

  NeptuneAnalyticsGraph:
    Type: AWS::NeptuneGraph::Graph
    DependsOn: BedrockAgentRole
    Properties:
      GraphName: !Sub "${CollectionName}-graph-v3"
      ProvisionedMemory: 16
      DeletionProtection: false
      PublicConnectivity: true
      ReplicaCount: 1
      VectorSearchConfiguration:
        VectorSearchDimension: 1536

  BedrockKnowledgeBase:
    Type: AWS::Bedrock::KnowledgeBase
    DependsOn:
      - BedrockAgentRole
      - NeptuneAnalyticsGraph
    Properties:
      Name: rag-kb
      RoleArn: !GetAtt BedrockAgentRole.Arn
      KnowledgeBaseConfiguration:
        Type: VECTOR
        VectorKnowledgeBaseConfiguration:
          # Titan Embed Text v1 (region-dinamik ARN)
          EmbeddingModelArn: !Sub "arn:${AWS::Partition}:bedrock:${AWS::Region}::foundation-model/amazon.titan-embed-text-v1"
      StorageConfiguration:
        Type: NEPTUNE_ANALYTICS
        NeptuneAnalyticsConfiguration:
          GraphArn: !GetAtt NeptuneAnalyticsGraph.GraphArn
          FieldMapping:
            TextField: text
            MetadataField: metadata

  BedrockDataSource:
    Type: AWS::Bedrock::DataSource
    DependsOn:
      - BedrockAgentRole
      - BedrockKnowledgeBase
    Properties:
      Name: rag-kb-source-test
      KnowledgeBaseId: !Ref BedrockKnowledgeBase
      DataSourceConfiguration:
        Type: S3
        S3Configuration:
          BucketArn: !Sub "arn:${AWS::Partition}:s3:::${DataSourceBucketName}"
          InclusionPrefixes:
            - !Ref DataSourcePrefix
      VectorIngestionConfiguration:
        ChunkingConfiguration:
          ChunkingStrategy: FIXED_SIZE
          FixedSizeChunkingConfiguration:
            MaxTokens: 800
            OverlapPercentage: 15
        ContextEnrichmentConfiguration:
          Type: BEDROCK_FOUNDATION_MODEL
          BedrockFoundationModelConfiguration:
            # Claude 3 Haiku 20240307 (region-dinamik ARN) — Graph enrichment ile uyumlu
            ModelArn: !Sub "arn:${AWS::Partition}:bedrock:${AWS::Region}::foundation-model/anthropic.claude-3-haiku-20240307-v1:0"
            EnrichmentStrategyConfiguration:
              Method: CHUNK_ENTITY_EXTRACTION

  BedrockAgent:
    Type: AWS::Bedrock::Agent
    DependsOn:
      - BedrockDataSource
    Properties:
      AgentName: !Sub "${CollectionName}-agent-test"
      AgentResourceRoleArn: !GetAtt BedrockAgentRole.Arn
      # Agent için MODEL ID (Claude 3.5 Haiku)
      FoundationModel: !Ref AgentModelId
      Description: "RAG assistant"
      Instruction: |
        You are a retrieval-augmented assistant. Use the knowledge base to answer user queries as helpfully as possible.
      AutoPrepare: true
      KnowledgeBases:
        - KnowledgeBaseId: !Ref BedrockKnowledgeBase
          KnowledgeBaseState: ENABLED
          Description: "RAG assistant"
      ActionGroups:
        - ActionGroupName: AskUserAction
          ParentActionGroupSignature: AMAZON.UserInput
          ActionGroupState: ENABLED

  BedrockAgentAlias:
    Type: AWS::Bedrock::AgentAlias
    DependsOn: BedrockAgent
    Properties:
      AgentAliasName: !Sub "${CollectionName}-agent-alias-v2"
      AgentId: !Ref BedrockAgent
      Description: "Stable alias for agent"

  BedrockAgentCredentialsSecret:
    Type: AWS::SecretsManager::Secret
    DependsOn:
      - BedrockAgentAlias
    Properties:
      Name: !Sub "${CollectionName}-agent-creds-v2"
      Description: "Stores Bedrock Agent and Alias plus Data Source and Knowledge Base IDs"
      SecretString:
        Fn::Sub:
          - |
            {
              "BEDROCK_AGENT_ID":"${AgentIdRef}",
              "BEDROCK_AGENT_ARN":"${AgentArn}",
              "BEDROCK_AGENT_ALIAS_ARN":"${AgentAliasArn}",
              "DATA_SOURCE_ID":"${DataSourceId}",
              "KNOWLEDGE_BASE_ID":"${KnowledgeBaseId}"
            }
          - AgentIdRef: !Ref BedrockAgent
            AgentArn: !GetAtt BedrockAgent.AgentArn
            AgentAliasArn: !GetAtt BedrockAgentAlias.AgentAliasArn
            DataSourceId: !GetAtt BedrockDataSource.DataSourceId
            KnowledgeBaseId: !Ref BedrockKnowledgeBase

Outputs:
  KnowledgeBaseId:
    Description: "Bedrock Knowledge Base ID"
    Value: !Ref BedrockKnowledgeBase
    Export:
      Name: !Sub "${AWS::StackName}-KnowledgeBaseId"

  DataSourceId:
    Description: "Bedrock Data Source ID"
    Value: !GetAtt BedrockDataSource.DataSourceId
    Export:
      Name: !Sub "${AWS::StackName}-DataSourceId"

  AgentId:
    Description: "Bedrock Agent ID"
    Value: !Ref BedrockAgent
    Export:
      Name: !Sub "${AWS::StackName}-AgentId"

  AgentAliasArn:
    Description: "Bedrock Agent Alias ARN"
    Value: !GetAtt BedrockAgentAlias.AgentAliasArn
    Export:
      Name: !Sub "${AWS::StackName}-AgentAliasArn"
